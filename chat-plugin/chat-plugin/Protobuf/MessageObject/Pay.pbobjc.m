// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pay.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Pay.pbobjc.h"
#import "CommonTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NCProtoPayRoot

@implementation NCProtoPayRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - NCProtoPayRoot_FileDescriptor

static GPBFileDescriptor *NCProtoPayRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"netcloth"
                                                 objcPrefix:@"NCProto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NCProtoPayReason

GPBEnumDescriptor *NCProtoPayReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PayReasonUnspecified\000PayReasonRecallMsg\000";
    static const int32_t values[] = {
        NCProtoPayReason_PayReasonUnspecified,
        NCProtoPayReason_PayReasonRecallMsg,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NCProtoPayReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NCProtoPayReason_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NCProtoPayReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case NCProtoPayReason_PayReasonUnspecified:
    case NCProtoPayReason_PayReasonRecallMsg:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum NCProtoPayMethod

GPBEnumDescriptor *NCProtoPayMethod_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PayMethodUnspecified\000PayMethodAlipay\000";
    static const int32_t values[] = {
        NCProtoPayMethod_PayMethodUnspecified,
        NCProtoPayMethod_PayMethodAlipay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NCProtoPayMethod)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NCProtoPayMethod_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NCProtoPayMethod_IsValidValue(int32_t value__) {
  switch (value__) {
    case NCProtoPayMethod_PayMethodUnspecified:
    case NCProtoPayMethod_PayMethodAlipay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NCProtoPayPriceReq

@implementation NCProtoPayPriceReq

@dynamic reason;

typedef struct NCProtoPayPriceReq__storage_ {
  uint32_t _has_storage_[1];
  NCProtoPayReason reason;
} NCProtoPayPriceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reason",
        .dataTypeSpecific.enumDescFunc = NCProtoPayReason_EnumDescriptor,
        .number = NCProtoPayPriceReq_FieldNumber_Reason,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoPayPriceReq__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoPayPriceReq class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoPayPriceReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NCProtoPayPriceReq_Reason_RawValue(NCProtoPayPriceReq *message) {
  GPBDescriptor *descriptor = [NCProtoPayPriceReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayPriceReq_FieldNumber_Reason];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoPayPriceReq_Reason_RawValue(NCProtoPayPriceReq *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoPayPriceReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayPriceReq_FieldNumber_Reason];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NCProtoPayPriceRsp

@implementation NCProtoPayPriceRsp

@dynamic orignalPrice;
@dynamic currentPrice;
@dynamic discount;
@dynamic description_p;

typedef struct NCProtoPayPriceRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *orignalPrice;
  NSString *currentPrice;
  NSString *description_p;
} NCProtoPayPriceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orignalPrice",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayPriceRsp_FieldNumber_OrignalPrice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoPayPriceRsp__storage_, orignalPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "currentPrice",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayPriceRsp_FieldNumber_CurrentPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NCProtoPayPriceRsp__storage_, currentPrice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "discount",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayPriceRsp_FieldNumber_Discount,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayPriceRsp_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NCProtoPayPriceRsp__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoPayPriceRsp class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoPayPriceRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NCProtoPayOrderReq

@implementation NCProtoPayOrderReq

@dynamic reason;
@dynamic method;
@dynamic subject;
@dynamic amount;
@dynamic description_p;
@dynamic bizContent;

typedef struct NCProtoPayOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NCProtoPayReason reason;
  NCProtoPayMethod method;
  NSString *subject;
  NSString *amount;
  NSString *description_p;
  NSData *bizContent;
} NCProtoPayOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reason",
        .dataTypeSpecific.enumDescFunc = NCProtoPayReason_EnumDescriptor,
        .number = NCProtoPayOrderReq_FieldNumber_Reason,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = NCProtoPayMethod_EnumDescriptor,
        .number = NCProtoPayOrderReq_FieldNumber_Method,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderReq_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderReq_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderReq_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizContent",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderReq_FieldNumber_BizContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NCProtoPayOrderReq__storage_, bizContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoPayOrderReq class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoPayOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NCProtoPayOrderReq_Reason_RawValue(NCProtoPayOrderReq *message) {
  GPBDescriptor *descriptor = [NCProtoPayOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayOrderReq_FieldNumber_Reason];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoPayOrderReq_Reason_RawValue(NCProtoPayOrderReq *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoPayOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayOrderReq_FieldNumber_Reason];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t NCProtoPayOrderReq_Method_RawValue(NCProtoPayOrderReq *message) {
  GPBDescriptor *descriptor = [NCProtoPayOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayOrderReq_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoPayOrderReq_Method_RawValue(NCProtoPayOrderReq *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoPayOrderReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoPayOrderReq_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NCProtoPayOrderRsp

@implementation NCProtoPayOrderRsp

@dynamic payURL;
@dynamic outTradeNo;

typedef struct NCProtoPayOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  NSString *payURL;
  NSString *outTradeNo;
} NCProtoPayOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payURL",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderRsp_FieldNumber_PayURL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoPayOrderRsp__storage_, payURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "outTradeNo",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoPayOrderRsp_FieldNumber_OutTradeNo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NCProtoPayOrderRsp__storage_, outTradeNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoPayOrderRsp class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoPayOrderRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\003\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NCProtoOrder

@implementation NCProtoOrder

@dynamic reason;
@dynamic method;
@dynamic subject;
@dynamic amount;
@dynamic description_p;
@dynamic bizContent;
@dynamic outTradeNo;
@dynamic tradeNo;
@dynamic tradeStatus;
@dynamic gmtCreate;
@dynamic gmtRefund;
@dynamic gmtPayment;
@dynamic gmtClose;
@dynamic bizStatus;

typedef struct NCProtoOrder__storage_ {
  uint32_t _has_storage_[1];
  NCProtoPayReason reason;
  NCProtoPayMethod method;
  NCProtoOrderBizStatus bizStatus;
  NSString *subject;
  NSString *amount;
  NSString *description_p;
  NSData *bizContent;
  NSString *outTradeNo;
  NSString *tradeNo;
  NSString *tradeStatus;
  NSString *gmtCreate;
  NSString *gmtRefund;
  NSString *gmtPayment;
  NSString *gmtClose;
} NCProtoOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reason",
        .dataTypeSpecific.enumDescFunc = NCProtoPayReason_EnumDescriptor,
        .number = NCProtoOrder_FieldNumber_Reason,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "method",
        .dataTypeSpecific.enumDescFunc = NCProtoPayMethod_EnumDescriptor,
        .number = NCProtoOrder_FieldNumber_Method,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, method),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "subject",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_Subject,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, subject),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizContent",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_BizContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, bizContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "outTradeNo",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_OutTradeNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, outTradeNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tradeNo",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_TradeNo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, tradeNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tradeStatus",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_TradeStatus,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, tradeStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gmtCreate",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_GmtCreate,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, gmtCreate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gmtRefund",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_GmtRefund,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, gmtRefund),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gmtPayment",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_GmtPayment,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, gmtPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gmtClose",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrder_FieldNumber_GmtClose,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, gmtClose),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bizStatus",
        .dataTypeSpecific.enumDescFunc = NCProtoOrderBizStatus_EnumDescriptor,
        .number = NCProtoOrder_FieldNumber_BizStatus,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(NCProtoOrder__storage_, bizStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoOrder class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoOrder__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NCProtoOrder_Reason_RawValue(NCProtoOrder *message) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_Reason];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoOrder_Reason_RawValue(NCProtoOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_Reason];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t NCProtoOrder_Method_RawValue(NCProtoOrder *message) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_Method];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoOrder_Method_RawValue(NCProtoOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_Method];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t NCProtoOrder_BizStatus_RawValue(NCProtoOrder *message) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_BizStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetNCProtoOrder_BizStatus_RawValue(NCProtoOrder *message, int32_t value) {
  GPBDescriptor *descriptor = [NCProtoOrder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NCProtoOrder_FieldNumber_BizStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NCProtoQueryOrderReq

@implementation NCProtoQueryOrderReq

@dynamic outTradeNo;

typedef struct NCProtoQueryOrderReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *outTradeNo;
} NCProtoQueryOrderReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "outTradeNo",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoQueryOrderReq_FieldNumber_OutTradeNo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoQueryOrderReq__storage_, outTradeNo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoQueryOrderReq class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoQueryOrderReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NCProtoQueryOrderRsp

@implementation NCProtoQueryOrderRsp

@dynamic hasOrder, order;
@dynamic tradeSuccess;

typedef struct NCProtoQueryOrderRsp__storage_ {
  uint32_t _has_storage_[1];
  NCProtoOrder *order;
} NCProtoQueryOrderRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "order",
        .dataTypeSpecific.className = GPBStringifySymbol(NCProtoOrder),
        .number = NCProtoQueryOrderRsp_FieldNumber_Order,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoQueryOrderRsp__storage_, order),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tradeSuccess",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoQueryOrderRsp_FieldNumber_TradeSuccess,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoQueryOrderRsp class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoQueryOrderRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NCProtoOrderHistoryReq

@implementation NCProtoOrderHistoryReq

@dynamic beginTime;
@dynamic endTime;

typedef struct NCProtoOrderHistoryReq__storage_ {
  uint32_t _has_storage_[1];
  int64_t beginTime;
  int64_t endTime;
} NCProtoOrderHistoryReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginTime",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrderHistoryReq_FieldNumber_BeginTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NCProtoOrderHistoryReq__storage_, beginTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = NCProtoOrderHistoryReq_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NCProtoOrderHistoryReq__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoOrderHistoryReq class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoOrderHistoryReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NCProtoOrderHistoryRsp

@implementation NCProtoOrderHistoryRsp

@dynamic ordersArray, ordersArray_Count;

typedef struct NCProtoOrderHistoryRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *ordersArray;
} NCProtoOrderHistoryRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ordersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NCProtoOrder),
        .number = NCProtoOrderHistoryRsp_FieldNumber_OrdersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NCProtoOrderHistoryRsp__storage_, ordersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NCProtoOrderHistoryRsp class]
                                     rootClass:[NCProtoPayRoot class]
                                          file:NCProtoPayRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NCProtoOrderHistoryRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
